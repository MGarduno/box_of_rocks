#!/usr/bin/env ruby

# Domain Search
# Search for available domains against a given
# dictionary of words.
#
#  Author: Keolo Keagy
#   Email: keolo@dreampointmedia.com
# License: New BSD
#
# About: TODO
#  * Add random delay so we don't overwhelm the
#    whois server with checks.
#  * Add other TLDs
class DomainSearch
  attr_accessor :tld, :pattern, :dictionary, :min_word_size#, :whois_delay

  # attr_accessor defaults
  def dictionary
    @dictionary ||= '/usr/share/dict/words'
  end

  def min_word_size
    @min_word_size ||= 14
  end

  # def whois_delay
  #   # random number of seconds to sleep
  # end

  def initialize
    # raise 'Called abstract class: DomainSearch'
    # @tld = tld
  end

  def available_domains
    word_list
    filter_word_list
    convert_word_to_domain_name
    check_whois
  end

  def word_list
    `cat #{dictionary}`.split("\n").grep(/#{@tld}$/)
  end

  def filter_word_list
    @words = word_list.select{|word| word.size > min_word_size}
  end

  def convert_word_to_domain_name
    @domains = @words.each{|word| word.sub!(/#{@tld}$/, ".#{@tld}")}
  end

  def check_whois
    #raise 'Called abstract method: DomainSearch#check_whois'
    puts "#{@domains.size} words match this tld."

    @available_domains = []
    @domains.each do |domain|
      status = `whois #{domain}`
      if status =~ @pattern
        puts "#{domain} available"
        @available_domains << domain
      else
        puts "#{domain} not available"
      end
    end
    @available_domains
  end
end


#class DomainSearchCa < DomainSearch
#  def tld
#    'ca'
#  end
#
#  def check_whois
#    @available_domains = []
#    @domains.each do |domain|
#      status = `whois #{domain}`
#      if status =~ /Status:         AVAIL/
#        @available_domains << domain
#      end
#    end
#    @available_domains
#  end
#end
#
#
#class DomainSearchCom < DomainSearch
#  def tld
#    'com'
#  end
#
#  def check_whois
#    @available_domains = []
#    @domains.each do |domain|
#      status = `whois #{domain}`
#      if status =~ /!Unknown host/
#        @available_domains << domain
#      else
#        @available_domains << domain + ' not avail.'
#      end
#    end
#    @available_domains
#  end
#end

# domain_search = DomainSearchCa.new
# domain_search.dictionary = '/usr/share/dict/wordy' # Optionally change dictionary
# puts domain_search.dictionary
# domain_search.min_word_size = 17
# puts domain_search.available_domains

domain_search = DomainSearch.new
domain_search.tld = 'net'
domain_search.pattern = /No match/
domain_search.min_word_size = 7
puts domain_search.filter_word_list
puts '--------'
domain_search.available_domains
