#!/usr/bin/env ruby

# GrepLog
# Show svn or log for given search term.
#
#  Author: Keolo Keagy
# License: New BSD

# TODO: Escape search_term (e.g. \#354)
#       Pipe to `less`?
#       Make object oriented
#       Highlight search term in results
#       Cache `svn log -v` for quicker performance
class Float
  def round_to(x)
    (self * 10**x).round.to_f / 10**x
  end
end

class SvnLogSearch
  SEARCH_TERM = ARGV[0]
  SEPERATOR = "\n------------------------------------------------------------------------\n"

  def initialize(format = :text)
    svn_log
    split_svn_log
    report
  end

  def svn_log
    @svn_log = `svn log -v`
  end

  def split_svn_log
    # Split svn log by commit and
    # shift off the first element
    # because it's empty.
    @svn_log = svn_log.split(/^-----.*-----$/)
    @svn_log.shift
  end

  def search_results
    @search_results = svn_log.select {|line| line =~ /#{SEARCH_TERM}/}
  end

  def num_commits
    # Return commits that match search term
    search_results.size
  end

  def num_file_changes
    # Count number of file changes
    @file_changes = 0
    @search_results.each {|result| @file_changes += result.split("\n").grep(/[ADIMR] \//).size}
  end

  def report
    # Output results
    num_commits
    num_file_changes
    puts @search_results.collect! {|result| SvnLogSearch::SEPERATOR + result.chomp}
    puts SvnLogSearch::SEPERATOR + 'There were: ' + num_commits.to_s + ' commits'
    puts 'There were: ' + @file_changes.to_s + ' file changes'
    puts 'file_changes/commits ratio: ' + (@file_changes.to_f / num_commits.to_f).round_to(2).to_s
  end
end

svn_log_search = SvnLogSearch.new(:text)
puts svn_log_search
