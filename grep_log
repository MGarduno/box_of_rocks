#!/usr/bin/env ruby

# GrepLog
# Show svn or log for given search term.
#
#  Author: Keolo Keagy
# License: New BSD

# TODO: Escape search_term (e.g. \#354)
#       Make object oriented
#       Add ability to search for multiple terms
#       Create option to turn off pager
#       Cache `svn log -v` for quicker performance
class Float
  def round_to(x)
    (self * 10**x).round.to_f / 10**x
  end
end

class Pager
  def self.run
    return if PLATFORM =~ /win32/
    return unless STDOUT.tty?

    read, write = IO.pipe

    unless Kernel.fork # Child process
      STDOUT.reopen(write)
      STDERR.reopen(write) if STDERR.tty?
      read.close
      write.close
      return
    end

    # Parent process, become pager
    STDIN.reopen(read)
    read.close
    write.close

    ENV['LESS'] = 'FSRX' # Don't page if the input is short enough

    Kernel.select [STDIN] # Wait until we have input before we start the pager
    pager = ENV['PAGER'] || 'less'
    exec pager rescue exec "/bin/sh", "-c", pager
  end
end

class String
  def colorize(text, color_code)
    "#{color_code}#{text}\e[0m"
  end

  def color_highlight
    colorize(self, "\e[33m")
  end

  def color_info
    colorize(self, "\e[32m")
  end
end


system('clear')

SEARCH_TERM = ARGV[0]
SEPERATOR = "\n------------------------------------------------------------------------\n"

# Get svn log -v
svn_log = `svn log -v`

# Split svn log by commit and
# shift off the first element
# because it's empty.
svn_log = svn_log.split(/^-----.*-----$/)
svn_log.shift

# Return commits that match search term
search_results = svn_log.select {|line| line =~ /#{SEARCH_TERM}/}
num_search_results = search_results.size

# Color highlight search term
search_results.map!{|result| result.gsub!(/(#{SEARCH_TERM})/, '\1'.color_highlight)}

# Count number of file changes
file_changes = 0
search_results.each{|result| file_changes += result.split("\n").grep(/[ADIMR] \//).size}

# Output results
Pager.run
puts search_results.map!{|result| SEPERATOR + result.chomp}
puts SEPERATOR + 'There were ' + num_search_results.to_s.color_info + ' commits'
puts 'There were ' + file_changes.to_s.color_info + ' file changes'
puts 'file_changes/commits ratio: ' + (file_changes.to_f / num_search_results.to_f).round_to(2).to_s.color_info
